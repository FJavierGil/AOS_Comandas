openapi: "3.0.3"
info:
  title: "üçΩÔ∏èAPI Comanda: Ejemplo de especificaci√≥n"
  version: "1.0.0"
  description: '[UPM] AOS: API para la gesti√≥n de Comandas'
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  contact:
    name: M√°ster Universitario en Ingenier√≠a Web
    url: 'http://miw.etsisi.upm.es/'
    email: miw.etsisi@upm.es
servers:
  - url: '{schema}://{server}:{port}/{basePath}'
    description: Servidor local
    variables:
      schema:
        description: Esquema
        default: http
        enum:
          - http
          - https
      server:
        description: Nombre del servidor
        default: 127.0.0.1
      port:
        description: N√∫mero de puerto
        default: '80'
      basePath:
        description: Ruta base
        default: api/v1
tags:
  - name: 'üëÜ Comanda'
    description: Comanda de un usuario registrado
  - name: 'üßæ Factura'
    description: Factura con el conjunto de comandas de un usuario
paths:
  /comanda:
    get:
      tags:
        - 'üëÜ Comanda'
      summary: Obtiene todas las comandas de un usuario
      operationId: upm_aos_comanda_cget
      responses:
        200:
          description: Array de comandas
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                type: object
                properties:
                  comandas:
                    description: array de comandas
                    type: array
                    items:
                      $ref: '#/components/schemas/Comanda'
              examples:
                comandasExamples:
                  $ref: '#/components/examples/comandas'
        404:
          $ref: '#/components/responses/Response_404'
    post:
      tags:
        - 'üëÜ Comanda'
      summary: Crea una nueva comanda
      description: Genera una nueva comanda para un usuario previamente registrado
      operationId: upm_aos_comanda_post
      requestBody:
        $ref: '#/components/requestBodies/comandaRB'
      responses:
        201:
          description: comanda creada
          headers:
            Location:
              $ref: '#/components/headers/Location'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comanda'
        422:
          $ref: '#/components/responses/Response_422'
    options:
      tags:
        - 'üëÜ Comanda'
      summary: Proporciona la lista de los m√©todos HTTP soportados.
      description: Devuelve una cabecera `Allow` con la lista de m√©todos HTTP soportados (separados por comas).
      operationId: upm_aos_comanda_coptions
      responses:
        '204':
          description: 'cabecera `Allow` &lt;El cuerpo de la respuesta est√° vac√≠o&gt;'
          headers:
            Allow:
              $ref: '#/components/headers/Allow'

  '/comanda/{comandaId}':
    parameters:
      - $ref: '#/components/parameters/comandaId'
    get:
      tags:
        - 'üëÜ Comanda'
      summary: Recupera una comanda espec√≠fica identificada por su ID.
      description: Devuelve la comanda identificada por `comandaId`.
      operationId: upm_aos_comanda_get
      responses:
        '200':
          description: Comanda
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comanda'
        '404':
          $ref: '#/components/responses/Response_404'
    delete:
      tags:
        - 'üëÜ Comanda'
      summary: Elimina una comanda.
      description: Elimina la comanda identificada por `comandaId`.
      operationId: upm_aos_comanda_delete
      responses:
        '204':
          description: Comanda eliminada &lt;Cuerpo de la respuesta vac√≠o&gt;
        '404':
          $ref: '#/components/responses/Response_404'
    options:
      tags:
        - 'üëÜ Comanda'
      summary: Proporciona la lista de los m√©todos HTTP soportados.
      description: Devuelve una cabecera `Allow` con la lista de m√©todos HTTP soportados (separados por comas).
      operationId: upm_aos_comanda_options
      responses:
        '204':
          description: 'cabecera `Allow` &lt;El cuerpo de la respuesta est√° vac√≠o&gt;'
          headers:
            Allow:
              $ref: '#/components/headers/Allow'
    put:
      tags:
        - 'üëÜ Comanda'
      summary: Modifica la comanda.
      description: Actualiza la comanda identificada por `comandaId`.
      operationId: upm_aos_comanda_put
      parameters:
        - $ref: '#/components/parameters/ifMatchParam'
      requestBody:
        $ref: '#/components/requestBodies/comandaRB'
      responses:
        '200':
          description: '`OK`: la comanda ha sido modificada'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comanda'
        '404':
          $ref: '#/components/responses/Response_404'
        '412':
          $ref: '#/components/responses/Response_412'

  /factura:
    post:
      tags: [ 'üßæ Factura' ]
      summary: Genera la factura de un usuario
      description: Genera la factura de un usuario previamente identificado.
      operationId: upm_aos_factura_post
      requestBody:
        $ref: '#/components/requestBodies/facturaRB'
      responses:
        '201':
          description: Factura
          headers:
            Location:
              $ref: '#/components/headers/Location'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Factura'
        '404':
          $ref: '#/components/responses/Response_404'

#
# Definici√≥n de Componentes
#
components:

  schemas:
    Comanda:
      $ref: './schemas/Comanda.yaml#/Comanda'
    Factura:
      $ref: './schemas/Factura.yaml#/Factura'
    HTTP_Problem:
      $ref: './schemas/HTTP_Problem.yaml#/HTTP_Problem'
    # Message:
    #   type: object
    #   description: HTTP response message
    #   properties:
    #     code:
    #       description: Response code
    #       type: integer
    #       format: int64
    #     message:
    #       description: Response message
    #       type: string

  headers:
    ETag:
      description: Entity Tag (identificador √∫nico proporcionado para validaci√≥n de cach√©)
      schema:
        type: string
        pattern: "[0-9a-f]*"
        # https://github.com/marak/Faker.js#api-methods
        x-faker: random.uuid
        example:
          33a64df551425fcc
    Location:
      description: '`URI` del nuevo recurso'
      schema:
        type: string
        format: url
        x-faker: internet.url
        example:
          /api/v1/comanda/1936
    Allow:
      description: Lista de m√©todos HTTP soportados
      schema:
        type: string
      example:
        GET,DELETE,PUT,OPTIONS

  parameters:
    comandaId:
      name: comandaId
      in: path
      description: ID de la comanda
      required: true
      schema:
        type: integer
        pattern: ^\d+$
    ifMatchParam:
      name: If-Match
      in: header
      description: ETag del recurso que se desea modificar
      required: true
      schema:
        type: string
        pattern: "[0-9a-f]*"

  requestBodies:
    comandaRB:
      description: '`Comanda` data'
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - ref
              - unidades
            properties:
              # userId:
              #   description: user Id
              #   type: integer
              #   format: int64
              ref:
                description: Ref. del art√≠culo solicitado
                type: integer
                format: int64
              unidades:
                description: "n√∫mero de unidades de la referencia"
                type: integer
                format: int64
            example:
              # userId: 2030
              ref: 33
              unidades: 12
    facturaRB:
      description: '`Factura` data'
      required: false
      content:
        application/json:
          schema:
            type: object
            properties:
              # userId:
              #   description: user Id
              #   type: integer
              #   format: int64
            # example:
              # userId: 34

  responses:
    Response_404:
      description: '`NOT FOUND`: recurso no disponible'
      content:
        # application/json:
        #   schema:
        #     $ref: '#/components/schemas/Message'
        #   examples:
        #     response-404:
        #       $ref: '#/components/examples/response-404'
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HTTP_Problem'
          examples:
            response-http-404:
              $ref: '#/components/examples/response-http-404'
    Response_412:
      description: '`PRECONDITION FAILED`: no se cumple alguna condici√≥n previa'
      content:
        # application/json:
        #   schema:
        #     $ref: '#/components/schemas/Message'
        #   examples:
        #     response-412:
        #       $ref: '#/components/examples/response-412'
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HTTP_Problem'
          examples:
            response-http-412:
              $ref: '#/components/examples/response-http-412'
    Response_422:
      description: '`UNPROCESSABLE ENTITY`: falta la referencia o las unidades'
      content:
        # application/json:
        #   schema:
        #     $ref: '#/components/schemas/Message'
        #   examples:
        #     response-422:
        #       $ref: '#/components/examples/response-422'
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HTTP_Problem'
          examples:
            response-http-422:
              $ref: '#/components/examples/response-http-422'

  examples:
    # response-404:
    #   value:
    #     code: 404
    #     message: "NOT FOUND: Recurso no disponible"
    # response-412:
    #   value:
    #     code: 412
    #     message: 'PRECONDITION FAILED: no se cumple alguna condici√≥n previa'
    # response-422:
    #   value:
    #     code: 422
    #     message: 'UNPROCESSABLE ENTITY: falta la referencia o las unidades'
    comandas:
      value:
        - id: 2021
          userId: 34
          ref: 1909
          unidades: 2
        - id: 2222
          userId: 34
          ref: 22222222
          unidades: 4
    response-http-404:
      value:
        type: https://httpstatuses.com/404
        title: NOT FOUND
        status: 404
        detail: El recurso solicitado no est√° disponible...
        instance: about:blank
    response-http-412:
      value:
        type: https://httpstatuses.com/412
        title: PRECONDITION FAILED
        status: 412
        detail: No se cumple alguna condici√≥n previa...
        instance: about:blank
    response-http-422:
      value:
        type: https://httpstatuses.com/422
        title: UNPROCESSABLE ENTITY
        status: 422
        detail: Falta la referencia o las unidades...
        instance: about:blank
